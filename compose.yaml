name: anime-stack

services:
  mongo:
    image: mongo:7-jammy
    container_name: anime-mongo
    restart: unless-stopped
    ports:
      - "${MONGO_PORT:-27017}:27017"
    environment:
      - MONGO_INITDB_DATABASE=${MONGODB_DB_NAME:-anime}
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ ping: 1 })'"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - anime-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: anime-backend
    restart: unless-stopped
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      - BACKEND_PORT=${BACKEND_PORT:-9000}
      - BACKEND_METRICS_PORT=${BACKEND_METRICS_PORT:-8001}
      - MONGODB_URI=${MONGODB_URI:-mongodb://anime-mongo:27017}
      - MONGODB_DB_NAME=${MONGODB_DB_NAME:-anime}
      - LOGGING__LEVEL=${BACKEND_LOG_LEVEL:-INFO}
      - METRICS__ENABLED=${METRICS_ENABLED:-true}
      - METRICS__BIND_HOST=${METRICS_BIND_HOST:-0.0.0.0}
      - METRICS__BIND_PORT=${METRICS_BIND_PORT:-8001}
      - CORS_ALLOW_ORIGINS=${BACKEND_CORS_ALLOW_ORIGINS:-["http://localhost:3000"]}
      - TVDB__API_KEY=${TVDB__API_KEY:-}
      - TMDB__API_KEY=${TMDB__API_KEY:-}
    volumes:
      - /data/:/storage/data/
    ports:
      - "${BACKEND_HOST_PORT:-9000}:9000"
      - "${BACKEND_METRICS_PORT:-8001}:8001"
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "9000"]
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://127.0.0.1:9000/health').getcode()==200 else 1)\""]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - anime-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: builder
      args:
        NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-/api}
    container_name: anime-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL:-/api}
      - PORT=3000
    command: ["pnpm", "start"]
    expose:
      - "3000"
    healthcheck:
      test:
        - CMD
        - node
        - -e
        - "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode >= 200 && r.statusCode < 400 ? 0 : 1)})"
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - anime-network

  nginx:
    image: nginx:1.27-alpine
    container_name: anime-nginx
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_started
    ports:
      - "${FRONTEND_HOST_PORT:-3000}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - anime-network

networks:
  anime-network:
    name: anime-network
    driver: bridge

volumes:
  mongo_data:
    name: anime-mongo-data

